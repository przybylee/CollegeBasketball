#Do a t.test
#t.test.lm(model1,c)
d <- conf_int.lm(model1, c, a = 0.05)
AL.d[m,]<- cbind(yr,d)
m = m+1
print(paste(yr, "done"))
}
#Do the same for the AL
n <- length(AL.d$Start.YR)
AL.d$diff.2018 <- NA
for(j in 1:n){
AL.d$diff.2018[j] <- -sum(AL.d$est[j:n])
}
plot(AL.d$Start.YR, AL.d$diff.2018, xlab = "year", ylab = "Change in OPS from 2018", main = "Average Talent in the AL")
abline(v= 1944)
abline(v = 1961)
abline(v = 1969)
abline(v = 1977)
abline(v = 1973)
min.pa <- 100
AL.d <- data.frame(matrix(data = NA, nrow = 2017-1901, ncol = 5))
names(AL.d) <- c("Start.YR", "est", "std.dev", "lower", "upper")
m = 1
for(yr in 1901:2017){
d1 <- hitters[yr == hitters$yearID & hitters$lgID == lg, 1:22]
d2 <- hitters[yr+1 == hitters$yearID & hitters$lgID == lg, 1:22 ]
h1 <- ddply(d1, .(playerID), collapse.season)
h2 <- ddply(d2, .(playerID), collapse.season)
h1 <- h1[h1$AB >= min.pa ,c(1:5,18:21)]
h2 <- h2[h2$AB >= min.pa ,c(1:5,18:21)]
h <- rbind(h1, h2)
h$YR <- as.factor(h$YR)
model1 <- lm(OPS ~ playerID + YR, data= h)
#summary(model1)
#anova(model1)
#yhat <- predict(model1)
#yhat1 <- yhat[h$YR == yr]
#yhat2 <- yhat[h$YR == yr+1]
#lambda <- unlist(coef(model1)[length(coef(model1))])
#This is the test statistic for the difference between seasons
#mean(yhat1)-mean(yhat2)+lambda
X <- model.matrix(model1)
r <- ncol(X)
c1 <- ifelse(h$YR == yr, 1,0)
c1 <- c1/sum(c1)
c2 <- ifelse(h$YR != yr, 1,0)
c2 <- c2/sum(c2)
en <- rep(0,length(coef(model1)))
en[r]<- 1
c <- -t(c1-c2)%*%X-t(en)
#Alternative way to get the test stat:
c%*%coef(model1)
#Do a t.test
#t.test.lm(model1,c)
d <- conf_int.lm(model1, c, a = 0.05)
AL.d[m,]<- cbind(yr,d)
m = m+1
print(paste(yr, "done"))
}
#Do the same for the AL
n <- length(AL.d$Start.YR)
AL.d$diff.2018 <- NA
for(j in 1:n){
AL.d$diff.2018[j] <- -sum(AL.d$est[j:n])
}
plot(AL.d$Start.YR, AL.d$diff.2018, xlab = "year", ylab = "Change in OPS from 2018", main = "Average Talent in the AL")
abline(v= 1944)
abline(v = 1961)
abline(v = 1969)
abline(v = 1977)
abline(v = 1973)
#Here we try to recreate the dick cramer results for comparing talent accross consecutive years of major league baseball
library(Lahman)
library(lme4)
library(vistime)
library(plyr)
library(MASS)
data()
#college <- CollegePlaying
hitters <- Batting
Leagues <- as.character(unique(hitters$lgID))
Start <- rep(NA, length(Leagues))
collapse.season <- function(d){
G <- sum(d$G); AB <- AB <- sum(d$AB); R <- sum(d$R)
H<- sum(d$H); X2B <- sum(d$X2B); X3B <- sum(d$X3B)
HR <- sum (d$HR) ; RBI <- sum(d$RBI); SB <- sum(d$SB, na.rm = T)
CS <- sum (d$CS, na.rm = T); BB <- sum(d$BB, na.rm = T) ; SH <- sum(d$SH, na.rm = T)
SF <- sum(d$SF, na.rm = T); HBP <- sum(d$HBP, na.rm = T)
SLG <- (H-X2B-X3B-HR+2*X2B+3*X3B+4*HR)/AB
OBP <- (H+BB+HBP)/(AB+BB+HBP+SF)
OPS <- SLG+OBP; YR <- d$yearID[1]
TM <- d$teamID[which.max(d$AB)]
LG <- d$lgID[which.max(d$AB)]
data.frame(YR = YR, LG = LG, TM = TM,G =G, AB = AB, R = R, H=H, X2B= X2B, X3B = X3B,
HR= HR, RBI = RBI, SB=SB, CS=CS, BB=BB, HBP = HBP,
SH=SH, SF=SF, SLG=SLG, OBP=OBP, OPS=OPS)
}
#confidence interval for lm
conf_int.lm=function(lmout,c,d=0,a){
b=coef(lmout)
var.b <- vcov(lmout)
X=model.matrix(lmout)
df= nrow(X) - length(b)
cb.d=c%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(c%*%var.b%*%t(c))
lower = cb.d - tquant%*%sqrt(c%*%var.b%*%t(c))
upper = cb.d + tquant%*%sqrt(c%*%var.b%*%t(c))
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
#Pick a year and league
yr = 1976
lg = "AL"
min.pa <- 20
d1 <- hitters[yr == hitters$yearID & hitters$lgID == lg, 1:22]
d2 <- hitters[yr+1 == hitters$yearID & hitters$lgID == lg, 1:22 ]
h1 <- ddply(d1, .(playerID), collapse.season)
h2 <- ddply(d2, .(playerID), collapse.season)
h1 <- h1[h1$AB >= min.pa ,c(1:5,18:21)]
h2 <- h2[h2$AB >= min.pa ,c(1:5,18:21)]
h <- rbind(h1, h2)
h$YR <- as.factor(h$YR)
model1 <- lmer(OPS ~ (playerID|1) + (YR|1), data= h)
model1 <- lmer(OPS ~ 1 + (playerID|1) + (YR|1), data= h)
h <- rbind(h1, h2)
h$YR <- as.factor(h$YR)
summary(h)
h$playerID <- as.factor(h$playerID)
model1 <- lmer(OPS ~ 1 + (playerID|1) + (YR|1), data= h)
View(h)
View(h)
model1 <- lmer(OPS ~ 1 + (playerID|1), data= h)
summary(h)
model1 <- lmer(OPS ~ 1 + (playerID|1), data= h)
View(h1)
model1 <- lmer(OPS ~ LG, data= h)
model1 <- lmer(OPS ~ (1|YR) + (1|playerID), data= h)
#summary(model1)
#anova(model1)
yhat <- predict(model1)
yhat1 <- yhat[h$YR == yr]
yhat2 <- yhat[h$YR == yr+1]
summary(model1)
#anova(model1)
fixef(model1)
#anova(model1)
ranef(model1)
#anova(model1)
ranef$YR(model1)
#anova(model1)
ranef(model1)
summary(model1)
#anova(model1)
ranef(model1)
#anova(model1)
ranef(model1)$YR
yhat1 <- yhat[h$YR == yr]-ranef(model1$YR)[1]
yhat2 <- yhat[h$YR == yr+1]-ranef(model1$YR)[2]
yhat1 <- yhat[h$YR == yr]-ranef(model1)$YR[1]
yhat2 <- yhat[h$YR == yr+1]-ranef(model1)$YR[2]
ranef(model1)$YR[2]
ranef(model1)$YR[1]
ranef(model1)$YR[1,1]
ranef(model1)$YR[2,1]
yhat1 <- yhat[h$YR == yr]-ranef(model1)$YR[1,1]
yhat2 <- yhat[h$YR == yr+1]-ranef(model1)$YR[2,1]
#This is the test statistic for the difference between seasons
mean(yhat1)-mean(yhat2)+lambda
#This is the test statistic for the difference between seasons
mean(yhat1)-mean(yhat2)
#This is the test statistic for the difference between seasons
mean(yhat2)-mean(yhat1)
AL.d[m,est]<- est.change
AL.d <- data.frame(matrix(data = NA, nrow = 2017-1901, ncol = 5))
names(AL.d) <- c("Start.YR", "est", "std.dev", "lower", "upper")
m = 1
for(yr in 1901:2017){
d1 <- hitters[yr == hitters$yearID & hitters$lgID == lg, 1:22]
d2 <- hitters[yr+1 == hitters$yearID & hitters$lgID == lg, 1:22 ]
h1 <- ddply(d1, .(playerID), collapse.season)
h2 <- ddply(d2, .(playerID), collapse.season)
h1 <- h1[h1$AB >= min.pa ,c(1:5,18:21)]
h2 <- h2[h2$AB >= min.pa ,c(1:5,18:21)]
h <- rbind(h1, h2)
h$YR <- as.factor(h$YR)
h$playerID <- as.factor(h$playerID)
model1 <- lmer(OPS ~ (1|YR) + (1|playerID), data= h)
summary(model1)
#anova(model1)
ranef(model1)$YR
yhat <- predict(model1)
yhat1 <- yhat[h$YR == yr]-ranef(model1)$YR[1,1]
yhat2 <- yhat[h$YR == yr+1]-ranef(model1)$YR[2,1]
#This is the test statistic for the difference between seasons
est.change <- mean(yhat2)-mean(yhat1)
AL.d[m,"est"]<- est.change
m = m+1
print(paste(yr, "done"))
}
summary(AL.d)
#Do the same for the AL
n <- length(AL.d$Start.YR)
AL.d$diff.2018 <- NA
for(j in 1:n){
AL.d$diff.2018[j] <- -sum(AL.d$est[j:n])
}
plot(AL.d$Start.YR, AL.d$diff.2018, xlab = "year", ylab = "Change in OPS from 2018", main = "Average Talent in the AL")
summary(AL.d)
plot(AL.d$Start.YR, AL.d$diff.2018, xlab = "year", ylab = "Change in OPS from 2018", main = "Average Talent in the AL")
View(AL.d)
AL.d$Start.YR <- 1901:2018
AL.d$Start.YR <- 1901:2017
#Do the same for the AL
n <- length(AL.d$Start.YR)
AL.d$diff.2018 <- NA
for(j in 1:n){
AL.d$diff.2018[j] <- -sum(AL.d$est[j:n])
}
plot(AL.d$Start.YR, AL.d$diff.2018, xlab = "year", ylab = "Change in OPS from 2018", main = "Average Talent in the AL")
abline(v= 1944)
abline(v = 1961)
abline(v = 1969)
abline(v = 1977)
abline(v = 1973)
load("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB/PlyrEffRegWorkspace.RData")
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(c%*%var.b%*%t(c))
lower = cb.d - tquant%*%sqrt(c%*%var.b%*%t(c))
upper = cb.d + tquant%*%sqrt(c%*%var.b%*%t(c))
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
par.names <- names(coef(plyr.reg))
lg1 <- "AL.1971"
d.lg1 <- hit[hit$lg.yr == lg1,]
roster1 <- unique(d.lg1$Plyr)
peffs1 <- paste("Plyr", roster1, sep = "")
c.ros1 <- ifelse(par.names %in% peffs1, 1, 0)
c.ros1 <- c.ros1/sum(c.ros1)
#Experiment with original conf_int function
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
c.lg1 <- ifelse(par.names ==  paste("lg.yr", lg1, sep = ""), 1, 0)
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
View(conf_int.lm)
length(beta)
beta = coef(plyr.reg)
length(beta)
length(par.names)
Sig = vcov(plyr.reg)
ncol(Sig)
nrow(Sig)
length(c.lg1)
ncol(c.lg1%*% Sig)
nrow(c.lg1%*%Sig)
sd = c.lg1%*% Sig %*% t(c.lg1)
ncol(t(c.lg1))
ncol(c.lg1)
ncol(as.matrix(c.lg1))
beta = as.matix(coef(plyr.reg))
beta = as.matix(drop(coef(plyr.reg)))
as.matrix(c.lg1)
as.matrix(beta)
as.matrix(coef(plyr.reg))
ncol(as.matrix(c.lg1))
#confidence interval for lm
conf_int.lm=function(lmout,c,d=0,a){
b=as.matrix(coef(lmout))
c = as.matrix(c)
var.b <- vcov(lmout)
X=model.matrix(lmout)
df= nrow(X) - length(b)
cb.d=t(c)%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
par.names <- names(coef(plyr.reg))
lg1 <- "AL.1971"
d.lg1 <- hit[hit$lg.yr == lg1,]
roster1 <- unique(d.lg1$Plyr)
peffs1 <- paste("Plyr", roster1, sep = "")
c.ros1 <- ifelse(par.names %in% peffs1, 1, 0)
c.ros1 <- c.ros1/sum(c.ros1)
c.lg1 <- ifelse(par.names ==  paste("lg.yr", lg1, sep = ""), 1, 0)
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
d1
#Experiment with sparse matrix computations:
#First check multiplication:
Z=Matrix(model.matrix(plyr.reg), sparse = T)
library(Matrix)
#Experiment with sparse matrix computations:
#First check multiplication:
Z=Matrix(model.matrix(plyr.reg), sparse = T)
#Still not enough memory
Matrix(c.lg1)
#Still not enough memory
ncol(Matrix(c.lg1, sparse = T))
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
#X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
Sig = Matrix(vcov(plyr.reg), sparse = T)
vec = Matrix(c.lg1, sparse = T)
ncol(vec)
Sig%*%vec
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf - t0
t(vec)%*%Sig%*%vec
print(d1)
sqrt(t(vec)%*%Sig%*%vec)
print(d1)
A = sqrt(t(vec)%*%Sig%*%vec)
A[1,1]
A = sqrt(t(vec)%*%Sig%*%vec)[1,1]
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=(c%*%b)[1,1]-d
#X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)[1,1]
lower = cb.d - tquant*std.dev
upper = cb.d + tquant*std.dev
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf - t0
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf = Sys.time()
tf - t0
#This code takes about 1.5 minutes
print(d2)
print(d1)
HAplot
load("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB/ModelSelection.RData")
?gls
library(nlme)
?gls
library(geepack)
data("dietox")
head(dietox)
library(lme4)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(dietox)
dietox$Pig <- factor(dietox$Pig)
dietox$Pig <- factor(dietox$Pig)
summary(dietox)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
summary(model2)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
dietox$Litter <- factor(dietox$Litter)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Litter:Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter/Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
head(dietox)
?dietox
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
summary(model2)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
library(TDA)
library(TDA)
phi0 <- function(x){
x/3
}
phi0(9)
(x+2)/3
phi2 <- function(x){
(x+2)/3
}
C3prox <- c(0)
scale <- 20
for (j in 1:20){
out0 <- phi0(C3prox)
out2 <- phi2(C3prox)
C3prox <- c(out0, out2)
}
C3prox <- matrix(C3prox, nrow = length(C3prox), ncol = 1)
C3prox <- data.frame(matrix(C3prox, nrow = length(C3prox), ncol = 1))
head(C3prox)
View(C3prox)
View(C3prox)
names(C3prox) <- "x"
head(C3prox)
ggplot(data = C3prox) + geom_point()
library(ggplot2)
ggplot(data = C3prox) + geom_point()
C3prox$y <- 0
head(C3prox)
ggplot(data = C3prox, aes(x = x, y = y)) + geom_point()
setwd("C:/Users/Lee/Git Repos/CollegeBasketball")
library(ggplot2)
library(plyr)
teams <- read.csv("cbb.csv", header = T, sep = ",")
head(teams)
summary(teams)
#2015-2019 seasons
unique(teams$POSTSEASON)
unique(teams$SEED)
teams$tournament
teams$POSTSEASON <- as.character(teams$POSTSEASON)
head(teams)
unique(teams$POSTSEASON)
teams$Qtournament <- ifelse(!is.na(teams$POSTSEASON), 1,0)
tail(teams)
results <- c("Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "R68")
teams$Q32 <- ifelse(teams$POSTSEASON %in% results[1:6], 1,0)
teams$Q16 <- ifelse(teams$POSTSEASON %in% results[1:5], 1,0)
teams$Q8 <- ifelse(teams$POSTSEASON %in% results[1:4], 1,0)
teams$Q4 <- ifelse(teams$POSTSEASON %in% results[1:3], 1,0)
teams$QF <- ifelse(teams$POSTSEASON %in% results[1:2], 1,0)
#What conferences do we see:
unique(teams$CONF)
power5 <-c("ACC", "B10", "B12", "SEC", "P12")
group5 <- c("Amer", "CUSA", "MWC", "SB", "MAC")
other5 <- c("WCC", "MVC", "Ivy", "Asun", "Ind")
#For each conference, count the number of final 4 appearnaces
confs <- unique(teams$CONF)
final4count <- function(conf){
v <- teams$Q4[teams$CONF == conf]
return(sum(v))
}
v <- teams$Q4[]
final4count("ACC")
final4count("B10")
confs <- as.character(unique(teams$CONF))
count <- rep(0, 33)
for (j in 1:33){
count[j] <- final4count(confs[j])
}
final4s <- data.frame(confs = confs, count = count)
head(final4s)
summary(final4s)
final4s <- final4s[final4s$count >0, ]
final4s
#plot the final 4 counts
ggplot(data = final4s, aes(x = confs, y = count)) + geom_bar(stat = "identity")+
labs(title = "Final 4 Appearances 2015 - 2019", xlab = "conference")
prob_16 <- glm(Q16 ~ ADJOE + ADJDE + ADJ_T, family = binomial(link = logit), data = teams)
summary(prob_16)
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = Q16)) + geom_point(size = 2)
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = POSTSEASON)) + geom_point(size = 2)
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = Q16)) + geom_point(size = 2)
#Plot where all the teams F16 teams land in ADJOE, ADJDE
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = Q4)) + geom_point(size = 2)
teams[teams$Q4 == 1,]
#Plot where teams end up in the post season based on offense or defense
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = POSTSEASON)) + geom_point(size = 2)
View(final4s)
